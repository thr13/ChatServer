events {
    # worker_connections: 워커 프로세스가 동시에 처리할 수 있는 최대 클라이언트 연결수
    worker_connections 1024;
    # multi_accept, accept_mutex, accept_mutex_delay, debug_connection 등 ...
}

http {
    # upstream 서버 정의 (인스턴스 3개: 채팅 앱): 로드밸런싱을 위해 여러 백엔드 서버를 하나의 그룹으로 묶는 역할을 수행함
    upstream chat_backend {
        ip_hash;
        server chat-app-1:8000;
        server chat-app-2:8000;
        server chat-app-3:8000;
    }

    # 로깅 설정: nginx 가 로그를 기록할 때 사용하고자 하는 로그 포맷 형식을 의미
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'upstream_addr=$upstream_addr '
                    'request_time=$request_time '
                    'upstream_response_time=$upstream_response_time';

    # 로그 파일 보관 경로 설정
    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;

    # sendfile: nginx 가 정적 파일에 대해서 클라이언트에게 전송할 때 사용하는 방식 => on 설정시 파일을 메모리에 복사하지 않고 직접 커널에서 클라이언트에게 전송하는 형태로 동작
    sendfile on;

    # 해시 테이블 크기 지정 => 작게 설정시 메모리 사용량이 줄어드는 이점이 있지만 판단하는데 레이턴시가 증가함
    types_hash_max_size 2048;

    # tcp_nopush: 패킷 전송 전 최대한 많은 데이터를 채워서 전송 => off 설정시 패킷을 즉시 전송하여 지연을 줄일 수 있지만 네트워크 작접이 빈번하게 일어날 수 있음
    tcp_nopush on;

    # tcp_nodelay: Nagle 이라는 알고리즘을 비활성화 함으로써 작은 패킷도 즉시 전송을 하는 설정임 => off 설정시 작은 패킷을 한번에 모아서 전송을 하므로 실시간 데이터 제공 상황에서 지연이 발생할 수 있음
    tcp_nodelay on;

    # 클라이언트 연결 설정: 유지시간/최대 연결 요청 수
    keepalive_timeout 75s;
    keepalive_requests 100;

    # 버퍼 설정
    client_body_buffer_size 128k;
    client_max_body_size 10m;
    client_header_buffer_size 1k;
    large_client_header_buffers 4 4k;

    output_buffers 1 32k;
    postpone_output 1460;

    # WebSocket 을 위한 Map 설정 => upgrade 값이 빈 문자열일 경우, 커넥션을 빈 문자열로 처리하여 알번 HTTP 로 처리 => upgrade 값이 빈 문자열이 아닐 경우 WebSocket 으로 처리할 거라고 명시함
    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }

    # 서버 설정 => 클라이언트가 Nginx 서버에 요청을 보내면, Nginx 가 서버 블록내 listen, server_name 을 기준으로 요청에 맞는 블록을 찾고 요청 경로에 알맞은 처리를 진행함
    server {
        listen 80;
        server_name localhost;

        # WebSocket 경로
        location /api/ws/ {
            proxy_pass http://chat_backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy-read_timeout 3600;
            proxy_buffering off;
        }
    }

    # API 경로
    location /api/ {
        proxy_pass http://chat_backend;
        proxy_set_header Host $host;
        proxy_set_header X-Real_IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # 오류 페이지
    error_page  500 502 503 504 /50x.html;
    location = /50x.html {
        root    /usr/share/nginx/html;
    }
}